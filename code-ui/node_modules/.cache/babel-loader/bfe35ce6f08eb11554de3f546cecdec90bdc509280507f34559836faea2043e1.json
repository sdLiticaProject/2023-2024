{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\nimport * as api from '../constants/api';\nexport const TIME_SERIES_LOADING = 'time_series_loading';\nexport const TIME_SERIES_LOADING_SUCCESS = 'time_series_loading_success';\nexport const TIME_SERIES_LOADING_FAIL = 'time_series_loading_fail';\nexport const TIME_SERIES_CREATION = 'time_series_creation';\nexport const TIME_SERIES_CREATION_SUCCESS = 'time_series_creation_success';\nexport const TIME_SERIES_CREATION_FAIL = 'time_series_creation_fail';\nexport const getTimeSeriesList = () => async dispatch => {\n  dispatch({\n    type: TIME_SERIES_LOADING\n  });\n  try {\n    const token = Cookies.get('token');\n    const res = await axios.get(api.timeSeriesList(), {\n      headers: {\n        Authorization: `cloudToken ${token}`\n      }\n    });\n    console.log(res);\n    return dispatch({\n      type: TIME_SERIES_LOADING_SUCCESS,\n      data: res.data\n    });\n  } catch (error) {\n    return dispatch({\n      type: TIME_SERIES_LOADING_FAIL,\n      message: 'Failed to load time series list'\n    });\n  }\n};\nexport const createTimeSeries = (name, description) => async dispatch => {\n  dispatch({\n    type: TIME_SERIES_CREATION\n  });\n  try {\n    const token = Cookies.get('token');\n    const res = await axios.post(api.timeSeriesList(), {\n      name,\n      description\n    }, {\n      headers: {\n        Authorization: `cloudToken ${token}`\n      }\n    });\n    return dispatch({\n      type: TIME_SERIES_CREATION_SUCCESS,\n      data: res.data\n    });\n  } catch (error) {\n    return dispatch({\n      type: TIME_SERIES_CREATION_FAIL,\n      message: 'Failed to load time series list'\n    });\n  }\n};","map":{"version":3,"names":["axios","Cookies","api","TIME_SERIES_LOADING","TIME_SERIES_LOADING_SUCCESS","TIME_SERIES_LOADING_FAIL","TIME_SERIES_CREATION","TIME_SERIES_CREATION_SUCCESS","TIME_SERIES_CREATION_FAIL","getTimeSeriesList","dispatch","type","token","get","res","timeSeriesList","headers","Authorization","console","log","data","error","message","createTimeSeries","name","description","post"],"sources":["/Users/dmitrydrobysh/Desktop/sdlitica/code-ui/src/actions/timeSeries.js"],"sourcesContent":["import axios from 'axios';\nimport Cookies from 'js-cookie';\nimport * as api from '../constants/api';\n\nexport const TIME_SERIES_LOADING = 'time_series_loading';\nexport const TIME_SERIES_LOADING_SUCCESS = 'time_series_loading_success';\nexport const TIME_SERIES_LOADING_FAIL = 'time_series_loading_fail';\n\nexport const TIME_SERIES_CREATION = 'time_series_creation';\nexport const TIME_SERIES_CREATION_SUCCESS = 'time_series_creation_success';\nexport const TIME_SERIES_CREATION_FAIL = 'time_series_creation_fail';\n\nexport const getTimeSeriesList = () => async (dispatch) => {\n  dispatch({\n    type: TIME_SERIES_LOADING,\n  });\n\n  try {\n    const token = Cookies.get('token');\n    const res = await axios.get(api.timeSeriesList(), {\n      headers: {\n        Authorization: `cloudToken ${token}`,\n      },\n    });\n    console.log(res);\n\n    return dispatch({\n      type: TIME_SERIES_LOADING_SUCCESS,\n      data: res.data,\n    });\n  } catch (error) {\n    return dispatch({\n      type: TIME_SERIES_LOADING_FAIL,\n      message: 'Failed to load time series list',\n    });\n  }\n};\n\nexport const createTimeSeries = (name, description) => async (dispatch) => {\n  dispatch({\n    type: TIME_SERIES_CREATION,\n  });\n\n  try {\n    const token = Cookies.get('token');\n    const res = await axios.post(\n      api.timeSeriesList(),\n      {\n        name,\n        description,\n      },\n      {\n        headers: {\n          Authorization: `cloudToken ${token}`,\n        },\n      },\n    );\n\n    return dispatch({\n      type: TIME_SERIES_CREATION_SUCCESS,\n      data: res.data,\n    });\n  } catch (error) {\n    return dispatch({\n      type: TIME_SERIES_CREATION_FAIL,\n      message: 'Failed to load time series list',\n    });\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,KAAKC,GAAG,MAAM,kBAAkB;AAEvC,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,2BAA2B,GAAG,6BAA6B;AACxE,OAAO,MAAMC,wBAAwB,GAAG,0BAA0B;AAElE,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;AAC1D,OAAO,MAAMC,4BAA4B,GAAG,8BAA8B;AAC1E,OAAO,MAAMC,yBAAyB,GAAG,2BAA2B;AAEpE,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACzDA,QAAQ,CAAC;IACPC,IAAI,EAAER;EACR,CAAC,CAAC;EAEF,IAAI;IACF,MAAMS,KAAK,GAAGX,OAAO,CAACY,GAAG,CAAC,OAAO,CAAC;IAClC,MAAMC,GAAG,GAAG,MAAMd,KAAK,CAACa,GAAG,CAACX,GAAG,CAACa,cAAc,CAAC,CAAC,EAAE;MAChDC,OAAO,EAAE;QACPC,aAAa,EAAG,cAAaL,KAAM;MACrC;IACF,CAAC,CAAC;IACFM,OAAO,CAACC,GAAG,CAACL,GAAG,CAAC;IAEhB,OAAOJ,QAAQ,CAAC;MACdC,IAAI,EAAEP,2BAA2B;MACjCgB,IAAI,EAAEN,GAAG,CAACM;IACZ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOX,QAAQ,CAAC;MACdC,IAAI,EAAEN,wBAAwB;MAC9BiB,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,WAAW,KAAK,MAAOf,QAAQ,IAAK;EACzEA,QAAQ,CAAC;IACPC,IAAI,EAAEL;EACR,CAAC,CAAC;EAEF,IAAI;IACF,MAAMM,KAAK,GAAGX,OAAO,CAACY,GAAG,CAAC,OAAO,CAAC;IAClC,MAAMC,GAAG,GAAG,MAAMd,KAAK,CAAC0B,IAAI,CAC1BxB,GAAG,CAACa,cAAc,CAAC,CAAC,EACpB;MACES,IAAI;MACJC;IACF,CAAC,EACD;MACET,OAAO,EAAE;QACPC,aAAa,EAAG,cAAaL,KAAM;MACrC;IACF,CACF,CAAC;IAED,OAAOF,QAAQ,CAAC;MACdC,IAAI,EAAEJ,4BAA4B;MAClCa,IAAI,EAAEN,GAAG,CAACM;IACZ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOX,QAAQ,CAAC;MACdC,IAAI,EAAEH,yBAAyB;MAC/Bc,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}